<?php
defined('BASEPATH') OR exit('No direct script access allowed');
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Makanan extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Makanan_model');
    } 
    /*
     * Listing of makanan
     */
    public function renderDokter($data){
        $this->load->view('partial/header', $data);
        $this->load->view('partial/mainDashboard');
        $this->load->view('partial/footer');
    }
    function index()
    {
        $data['title'] = "List Makanan";
        $data['list'] = $this->Makanan_model->get_all_makanan();
        $data['page'] = 'index';   
        
        $this->renderDokter($data);
    }
     
    function get_data_user()
    {
        $list = $this->Makanan_model->get_datatables();
        $data = array();
        $no = $_POST['start'];
        foreach ($list as $field) {
            // $no++;
            $row = array();
            $row[] = $field->kd_makanan;
            $row[] = $field->nm_makanan;
            $row[] = $field->kandungangizi;
            $row[] = $field->komposisi;
 
            $data[] = $row;
        }
 
        $output = array(
            "draw" => $_POST['draw'],
            "recordsTotal" => $this->Makanan_model->count_all(),
            "recordsFiltered" => $this->Makanan_model->count_filtered(),
            "data" => $data,
        );
        //output dalam format JSON
        echo json_encode($output);
    }
    function insert_dummy(){
        //jumlah data yang di insert
        $jumlah_data = 1000;
        for($i=1;$i<$jumlah_data;$i++){
            $data = array(
                'nm_makanan' => 'Roti',
		        'kandungangizi' => '10%',
                'komposisi' => 'Gandum');
           $this->db->insert('makanan', $data);        
        }
         echo $i. 'Data Telah Di insert';

    }

    /*
     * Adding a new makanan
     */
    function add()
    {   
        
        $data['title'] = "Add Makanan";
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'nm_makanan' => $this->input->post('nm_makanan'),
				'kandungangizi' => $this->input->post('kandungangizi'),
				'komposisi' => $this->input->post('komposisi'),
            );
            
            $makanan_id = $this->Makanan_model->add_makanan($params);
            redirect('makanan/index');
        }
        else
        {            
        $data['page'] = 'addmakanan';   
        $this->renderDokter($data);
        }
    }  

    /*
     * Editing a makanan
     */
    function edit($kd_makanan)
    {   
        $data['title'] = "Edit Makanan";
        // check if the makanan exists before trying to edit it
        $data['makanan'] = $this->Makanan_model->get_makanan($kd_makanan);
        
        if(isset($data['makanan']['kd_makanan']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'nm_makanan' => $this->input->post('nm_makanan'),
					'kandungangizi' => $this->input->post('kandungangizi'),
					'komposisi' => $this->input->post('komposisi'),
                );

                $this->Makanan_model->update_makanan($kd_makanan,$params);            
                redirect('makanan/index');
            }
            else
            {
        $data['page'] = 'editmakanan';   
        $this->renderDokter($data);
            }
        }
        else
            show_error('The makanan you are trying to edit does not exist.');
    } 

    /*
     * Deleting makanan
     */
    function remove($kd_makanan)
    {
        $makanan = $this->Makanan_model->get_makanan($kd_makanan);

        // check if the makanan exists before trying to delete it
        if(isset($makanan['kd_makanan']))
        {
            $this->Makanan_model->delete_makanan($kd_makanan);
            redirect('makanan/index');
        }
        else
            show_error('The makanan you are trying to delete does not exist.');
    }
    
}
